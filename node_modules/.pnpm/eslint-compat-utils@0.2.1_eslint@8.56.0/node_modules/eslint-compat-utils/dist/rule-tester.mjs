import * as eslint from 'eslint';
import * as semver from 'semver';
import { c as convertConfigToRc } from './shared/eslint-compat-utils.7bec2911.mjs';
import 'module';

let cacheRuleTester;
function getRuleTester() {
  return cacheRuleTester != null ? cacheRuleTester : cacheRuleTester = getRuleTesterInternal();
  function getRuleTesterInternal() {
    if (semver.gte(eslint.Linter.version, "9.0.0-0")) {
      return eslint.RuleTester;
    }
    return getRuleTesterClassForV8();
  }
}
function getRuleTesterClassForV8() {
  return class RuleTesterForV8 extends eslint.RuleTester {
    constructor(options) {
      var _a;
      const defineRules = [];
      super(
        convertConfigToRc(options, {
          defineRule(...args) {
            defineRules.push(args);
          }
        })
      );
      for (const args of defineRules) {
        (_a = this.linter) == null ? void 0 : _a.defineRule(...args);
      }
    }
    run(name, rule, tests) {
      super.run(name, rule, {
        valid: (tests.valid || []).map(
          (test) => typeof test === "string" ? test : convertConfigToRc(test)
        ),
        invalid: (tests.invalid || []).map(
          (test) => convertConfigToRc(test)
        )
      });
    }
  };
}

export { getRuleTester };
