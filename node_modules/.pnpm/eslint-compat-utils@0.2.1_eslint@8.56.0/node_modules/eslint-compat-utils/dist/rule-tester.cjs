'use strict';

const eslint = require('eslint');
const semver = require('semver');
const convertConfig = require('./shared/eslint-compat-utils.95f935d7.cjs');
require('module');

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  const n = Object.create(null);
  if (e) {
    for (const k in e) {
      n[k] = e[k];
    }
  }
  n.default = e;
  return n;
}

const eslint__namespace = /*#__PURE__*/_interopNamespaceCompat(eslint);
const semver__namespace = /*#__PURE__*/_interopNamespaceCompat(semver);

let cacheRuleTester;
function getRuleTester() {
  return cacheRuleTester != null ? cacheRuleTester : cacheRuleTester = getRuleTesterInternal();
  function getRuleTesterInternal() {
    if (semver__namespace.gte(eslint__namespace.Linter.version, "9.0.0-0")) {
      return eslint__namespace.RuleTester;
    }
    return getRuleTesterClassForV8();
  }
}
function getRuleTesterClassForV8() {
  return class RuleTesterForV8 extends eslint__namespace.RuleTester {
    constructor(options) {
      var _a;
      const defineRules = [];
      super(
        convertConfig.convertConfigToRc(options, {
          defineRule(...args) {
            defineRules.push(args);
          }
        })
      );
      for (const args of defineRules) {
        (_a = this.linter) == null ? void 0 : _a.defineRule(...args);
      }
    }
    run(name, rule, tests) {
      super.run(name, rule, {
        valid: (tests.valid || []).map(
          (test) => typeof test === "string" ? test : convertConfig.convertConfigToRc(test)
        ),
        invalid: (tests.invalid || []).map(
          (test) => convertConfig.convertConfigToRc(test)
        )
      });
    }
  };
}

exports.getRuleTester = getRuleTester;
