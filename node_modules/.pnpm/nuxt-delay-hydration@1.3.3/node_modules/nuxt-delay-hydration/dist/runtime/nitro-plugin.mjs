import { packString } from "packrup";
import { defineNitroPlugin } from "nitropack/dist/runtime/plugin";
import { createRouter as createRadixRouter, toRouteMatcher } from "radix3";
import { withoutBase } from "ufo";
import defu from "defu";
import { createFilter } from "./util.mjs";
import { debug, exclude, include, mode, replayScript, script } from "#nuxt-delay-hydration/api";
import { useRuntimeConfig } from "#imports";
const SCRIPT_REGEX = /<script(.*?)>/gm;
export default defineNitroPlugin((nitro) => {
  const filter = createFilter({ include, exclude });
  const config = useRuntimeConfig();
  const _routeRulesMatcher = toRouteMatcher(
    createRadixRouter({ routes: config.nitro?.routeRules })
  );
  nitro.hooks.hook("render:html", (htmlContext, { event }) => {
    if (!filter(event.path))
      return;
    const routeRules = defu({}, ..._routeRulesMatcher.matchAll(
      withoutBase(event.path.split("?")[0], useRuntimeConfig().app.baseURL)
    ).reverse());
    let currentMode = mode;
    if (typeof routeRules.delayHydration !== "undefined")
      currentMode = routeRules.delayHydration;
    if (!currentMode)
      return;
    let extraScripts = "";
    if (currentMode === "init") {
      const ASSET_RE = new RegExp(`<script[^>]*src="${config.app.buildAssetsDir}[^>]+><\\/script>`);
      const LINK_ASSET_RE = new RegExp(`<link rel="modulepreload" as="script" [^>]*href="${config.app.buildAssetsDir}[^>]+>`, "g");
      htmlContext.head = htmlContext.head.map((head) => head.replaceAll(LINK_ASSET_RE, ""));
      const toLoad = [];
      const isPageSSR = htmlContext.bodyAppend.some((b) => b.includes("$snuxt-delay-hydration-mode"));
      if (!isPageSSR)
        return;
      htmlContext.bodyAppend = htmlContext.bodyAppend.filter(
        (b) => {
          if (b.includes("window.__NUXT__") || !ASSET_RE.test(b))
            return true;
          let match;
          while ((match = SCRIPT_REGEX.exec(b)) !== null) {
            if (match.index === SCRIPT_REGEX.lastIndex)
              SCRIPT_REGEX.lastIndex++;
            if (match)
              toLoad.push(packString(match[1]));
          }
          return false;
        }
      );
      extraScripts = `_$delayHydration.then(e => {
  ;(${JSON.stringify(toLoad)}).forEach(s => {
    const script = document.createElement('script')
    Object.entries(s).forEach(([k, v]) => script.setAttribute(k, v))
    document.body.appendChild(script)
  })
})`;
    }
    if (replayScript)
      extraScripts += `;${replayScript}`;
    htmlContext.bodyAppend.push(`<script>
(function() {
  const w = window;
  w._$delayHydration = (() => {
    ${script}}
  )();
  ${debug ? "w._$delayHydration.then((e) => { console.log('[nuxt-delay-hydration] Hydration event', e) })" : ""}
  ${extraScripts}
})();
<\/script>`);
  });
});
