import { createRouter as createRadixRouter, toRouteMatcher } from "radix3";
import defu from "defu";
import { withoutBase } from "ufo";
import { createFilter } from "./util.mjs";
import { exclude, include, mode } from "#nuxt-delay-hydration/api";
import { defineNuxtPlugin, useRequestEvent, useRuntimeConfig, useState } from "#imports";
export default defineNuxtPlugin(async (nuxtApp) => {
  const hydrationMode = useState("nuxt-delay-hydration-mode", () => mode);
  if (import.meta.server) {
    const event = useRequestEvent();
    const config = useRuntimeConfig();
    const _routeRulesMatcher = toRouteMatcher(
      createRadixRouter({ routes: config.nitro?.routeRules })
    );
    const routeRules = defu({}, ..._routeRulesMatcher.matchAll(
      withoutBase(event.path.split("?")[0], useRuntimeConfig().app.baseURL)
    ).reverse());
    if (routeRules.delayHydration)
      hydrationMode.value = routeRules.delayHydration;
  }
  if (import.meta.client) {
    if (hydrationMode.value === "mount") {
      nuxtApp.hooks.hook("app:created", async () => {
        if (nuxtApp.ssrContext?.noSSR)
          return;
        if (nuxtApp.ssrContext?.url && (include.length || exclude.length)) {
          const filter = createFilter({ include, exclude });
          if (!filter(nuxtApp.ssrContext.url))
            return;
        }
        await window._$delayHydration;
      });
    }
  }
});
